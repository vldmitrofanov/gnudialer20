;*
;* GnuDialer - Complete, free predictive dialer
;*
;* Complete, free predictive dialer for contact centers.
;*
;* Copyright (C) 2006, GnuDialer Project
;*
;* Heath Schultz <heath1444@yahoo.com>
;* Richard Lyman <richard@dynx.net>
;*
;* This program is free software, distributed under the terms of
;* the GNU General Public License.
;*
[gnudialer-default]
include => dialermenu

[gnudialer-pjsip]
exten => _X.,1,Answer()
exten => _X.,2,Dial(PJSIP/${EXTEN},60)

[gnudialer_hold]
exten => s,1,NoOp(Putting customer on hold)
 same => n,MusicOnHold()  ; Start playing music on hold to the customer
 same => n,Hangup()       ; Hang up after hold is done (if necessary)

[gnudialer_bridge]
exten => s,1,NoOp(Rejoining the simple bridge)
 same => n,NoOp(Bridge ID: ${BRIDGE_ID})  ; Access the bridge ID passed via the Setvar command
 same => n,Bridge(${BRIDGE_ID})           ; Use the bridge ID to reconnect the parties to the simple bridge
 same => n,Hangup()

[dialermenu]
exten => s,1,Set(TIMEOUT(digit)=10|TIMEOUT(response)=15)
exten => s,n,Background(gnudialer-intro)
exten => s,n,Playback(silence/9)
exten => s,n,Hangup

exten => *11,1,GoTo(dialerlogin,s,1)
exten => *12,1,GoTo(dialerlogout,s,1)
exten => *13,1,GoTo(agent_conference,s,1)

;exten => _08X.,1,GoTo(faketrunk-incoming,${EXTEN},1)
exten => _08X.,1,NoOp(Sending call to the guest trunk)
    same => n,Dial(SIP/shirker_net/${EXTEN},60)
    same => n,Hangup()

exten => _008X.,1,NoOp(Sending call to the guest trunk)
    same => n,Dial(SIP/shirker_net/${EXTEN},60)
    same => n,Hangup()


exten => 3,1,Authenticate(1234)
exten => 3,n,ChanSpy(Agent)
exten => 3,n,Playback(vm-goodbye)
exten => 3,n,Hangup

exten => 4,1,SayAlpha(NOT YET AVAILABLE)
exten => 5,1,GoTo(icd_dialerlogin,s,1)

exten => t,1,Playback(vm-goodbye)
exten => t,2,Hangup
exten => i,1,Playback(pbx-invalid)
exten => i,n,Playback(vm-goodbye)
exten => i,n,Hangup

[dialerlogin]
;exten => s,1,AgentLogin()
;exten => s,1,AgentCallBackLogin(${CALLERIDNUM}|s|${CALLERIDNUM}@somewhere)
;exten => s,n,Hangup
exten => s,1,Answer()
exten => s,n,Set(USER_ID=${CUT(CHANNEL,-,1)})  ; Extract the part before the '-'
exten => s,n,Set(USER_ID=${CUT(USER_ID,/,2)})  ; Extract the user ID after the 'PJSIP/'
;exten => s,n,AddQueueMember(test1,PJSIP/${USER_ID}) 
;exten => s,n,Read(agent_id,dialerlogin,,4) ; Prompt agent to enter their ID
exten => s,n,AddQueueMember(test1,PJSIP/${agent_id}) ; Add the agent to the queue
exten => s,n,Playback(agent-loginok) ; Play a confirmation message
exten => s,n,GoSub(wait-for-next-call,s,1)

exten => h,1,NoOp(Cleaning up on hangup, checking dynamic status)
exten => h,n,ExecIf($["${QUEUE_MEMBER(list,test1,PJSIP/${USER_ID})}" != ""]?RemoveQueueMember(test1,PJSIP/${USER_ID}))
exten => h,n,Hangup()

; Subroutine to wait for the next call
[wait-for-next-call]
exten => s,1,NoOp(Entering wait-for-next-call subroutine)
exten => s,n,StopMusicOnHold() 
exten => s,n,Set(CHANNEL(musicclass)=default) ; Ensure the correct music class is set
exten => s,n,MusicOnHold()                    ; Start Music on Hold
exten => s,n,Wait(36000)  ; Adjust the wait period as needed to keep MOH active
exten => s,n,Goto(s,1)
exten => s,n,Hangup()


[dialerlogout]
;exten => s,1,AgentCallbackLogin(${CALLERIDNUM}|s|'#')
;exten => s,n,Hangup
exten => s,1,Answer()
exten => s,n,Set(USER_ID=${CUT(CHANNEL,-,1)})  ; Extract the part before the '-'
exten => s,n,Set(USER_ID=${CUT(USER_ID,/,2)})
;exten => s,n,Read(agent_id,dialerlogout,,4) ; Prompt agent to enter their ID
exten => s,n,RemoveQueueMember(test1,PJSIP/${USER_ID}) ; Remove the agent from the queue
exten => s,n,Playback(agent-loggedoff) ; Play a confirmation message
exten => s,n,Hangup()


;[icd_dialerlogin]
;exten => s,1,icd_agent(|noauth=0)

;[dialermonitor]
;exten => s,1,ResponseTimeout(10)
;exten => s,2,Background(agent-pass)
;exten => s,3,Read(MONPASS||20|)
;exten => s,4,GotoIf($["${MONPASS}" = "${MONITORPASS}"]?5:9)
;exten => s,5,ChanSpy(Agent|sq)
;exten => s,6,Playback(auth-thankyou)
;exten => s,7,Playback(vm-goodbye)
;exten => s,8,Hangup
;exten => s,9,GoTo(i,1)
;exten => t,1,GoTo(i,1)
;exten => i,1,Playback(auth-incorrect)
;exten => i,2,GoTo(s,1)

[backtomain]
exten => s,1,GoTo(gdincoming,s,1)


[gdincoming]
;this is here because of the setting of Zap/g1 in call.h as a test
;exten => _NXXNXXXXXX,1,Dial(${FAKETELCO}/${EXTEN})
;exten => _NXXNXXXXXX,1,Dial(${TRUNK}/1${EXTEN})
;exten => _NXXNXXXXXX,2,Hangup
;exten => _08X.,1,GoTo(faketrunk-incoming,${EXTEN},1)

exten => s,1,Answer()
exten => s,2,GoToIf($["${ISTRANSFER}" = "TRANSFER"]?15:3)
exten => s,3,GoToIf($["${DSPMODE}" = "none"]?15:4)
exten => s,4,GoToIf($["${DSPMODE}" = "backgrounddetect"]?13:5)
exten => s,5,GoToIf($["${DSPMODE}" = "nvfaxdetect"]?11:6)
exten => s,6,GoToIf($["${DSPMODE}" = "waitforsilence"]?9:7)
exten => s,7,GoToIf($["${DSPMODE}" = "custom"]?8:14)
exten => s,8,GoTo(custom,1)
exten => s,9,WaitForSilence(500|2)
exten => s,10,GoTo(s,15)
exten => s,11,NVFaxDetect(2||700)
exten => s,12,Goto(s,16)
exten => s,13,BackgroundDetect(silence/3|500|300|1050)
exten => s,14,GoTo(s,16)
exten => s,15,GoTo(talk,1)
exten => s,16,Hangup

;exten => s,1,Answer()
;exten => s,2,GoToIf($["${ISTRANSFER}" = "TRANSFER"]?14:3)
;exten => s,3,GoToIf($["${DSPMODE}" = "none"]?14:4)
;exten => s,4,GoToIf($["${DSPMODE}" = "backgrounddetect"]?13:5)
;exten => s,5,GoToIf($["${DSPMODE}" = "nvfaxdetect"]?11:6)
;exten => s,6,GoToIf($["${DSPMODE}" = "waitforsilence"]?9:7)
;exten => s,7,GoToIf($["${DSPMODE}" = "custom"]?8:14)
;exten => s,8,GoTo(custom,1)
;exten => s,9,WaitForSilence(500|2)
;exten => s,10,GoTo(s,14)
;exten => s,11,NVFaxDetect(2||700)
;exten => s,12,Goto(s,15)
;exten => s,13,BackgroundDetect(silence/2|500|300|1050)
;exten => s,14,GoTo(talk,1)
;exten => s,15,Hangup

;exten => s,1,Answer()
;exten => s,2,GoToIf($["${ISTRANSFER}" = "TRANSFER"]?15:3)
;exten => s,3,GoToIf($["${DSPMODE}" = "none"]?15:4)
;exten => s,4,GoToIf($["${DSPMODE}" = "backgrounddetect"]?13:5)
;exten => s,5,GoToIf($["${DSPMODE}" = "nvfaxdetect"]?11:6)
;exten => s,6,GoToIf($["${DSPMODE}" = "waitforsilence"]?9:7)
;exten => s,7,GoToIf($["${DSPMODE}" = "custom"]?8:14)
;exten => s,8,GoTo(custom,1)
;exten => s,9,WaitForSilence(500|2)
;exten => s,10,GoTo(s,15)
;exten => s,11,NVFaxDetect(2||700)
;exten => s,12,Goto(s,16)
;exten => s,13,BackgroundDetect(silence/2|5|1000|50)
;exten => s,14,GoTo(s,16)
;exten => s,15,GoTo(talk,1)
;exten => s,16,Hangup


;this is for custom stuff we will not be using
exten => custom,1,Set(TIMEOUT(digit)=10|TIMEOUT(response)=15)
exten => custom,2,Background(demo-congrats|s|m)
exten => 1,1,GoTo(talk,1)
exten => 1,2,hangup
exten => 2,1,GoTo(leavemsg,1)
exten => 3,1,Goto(dnc,1)
exten => leavemsg,1,Playback(beep)
exten => leavemsg,2,hangup
exten => dnc,1,Playback(confirm-removal)
exten => dnc,2,Playback(if-this-is-correct)
exten => dnc,3,hangup

;  these 2 will effect gnudialer statusing
;exten => t,1,Goto(s,4)
;exten => i,1,Playback(pbx-invalid)

;holding stuff
;exten => talk,11,icd_customer(name=fifo-customer|info=your message here|queue=${CAMPAIGN})

exten => talk,1,NoOp(DSPMODE = ${DSPMODE}, CAMPAIGN = ${CAMPAIGN}, LEADID = ${LEADID}, ISTRANSFER = ${ISTRANSFER})
exten => talk,2,GoToIf($["${ISTRANSFER}" = "TRANSFER"]?4:3)
exten => talk,3,UserEvent(Pickup|CallerIDName: ${CALLERIDNAME})
exten => talk,4,UserEvent(Queue${ISTRANSFER}|CallerIDName: ${CALLERIDNAME})
exten => talk,5,Wait(10)
exten => talk,6,GoToIf($["${ISTRANSFER}" = "TRANSFER"]?8:7)
exten => talk,7,UserEvent(Abandon|CallerIDName: ${CALLERIDNAME})
exten => talk,8,Hangup

exten => fax,1,UserEvent(Fax|CallerIDName: ${CALLERIDNAME})
exten => fax,2,Hangup

;this extension needs to be here for OriginateFailure triggers
exten => failed,1,Hangup

[gdtransfer]
exten => s,1,Answer()
exten => s,2,NoOp(GDTRANSFER: DSPMODE = ${DSPMODE}, CAMPAIGN = ${CAMPAIGN}, LEADID = ${LEADID}, ISTRANSFER = ${ISTRANSFER})
exten => s,3,UserEvent(QueueTRANSFER|CallerIDName: ${CALLERIDNAME})
exten => s,4,Wait(120)
exten => s,5,Hangup

; this is something heath was playing with 
;[gddetect]
;exten => s,1,DigitTimeout(5)
;exten => s,2,ResponseTimeout(5)
;exten => s,3,Set(MACHINE=0)
;exten => s,4,Answer
;exten => s,5,BackgroundDetect(silence/5, 1000, 50)
;exten => s,6,Noop(answering machine detected)
;exten => s,7,Set(MACHINE=1)
;exten => s,8,BackgroundDetect(silence/10, 1000, 50, 10050)
;exten => s,9,Noop(too long of a message)
;exten => s,10,Hangup
;exten => talk,1,GotoIf($[${MACHINE}=1]?2:4)
;exten => talk,2,UserEvent(MACHINE)
;exten => talk,3,Hangup
;exten => talk,4,GoTo(gdincoming,s,1)
;exten => talk,5,Hangup

;[gnudialer]
;exten => _NXXNXXXXXX,1,Dial(${TRUNK}/1${EXTEN})
;exten => _NXXNXXXXXX,1,Dial(${FAKETELCO}/${EXTEN})
;exten => _NXXNXXXXXX,1,Dial(${TRUNK}/1${EXTEN})
;exten => _NXXNXXXXXX,2,Hangup


; ******* NEW AGENT/CLOSER STUFF ***********
; DO NOT CHANGE ANY OF THE USEREVENTS (parsing will fail and SEG will happen) 
[agent]
exten => _X,1,NoOp(AGENT: - Transfer - CAMPAIGN: ${CAMPAIGN} LEADID: ${LEADID}|Channel: ${CHANNEL})
exten => _X,2,Set(ISTRANSFER=TRANSFER|TRANSFER_CONTEXT=agentdispo|AGENTCALLED=${EXTEN})
exten => _X,3,UserEvent(AgentCalled|Agent/${EXTEN} ${CALLERIDNAME})
exten => _X,4,Dial(PJSIP/${EXTEN},,t)
exten => _X,5,UserEvent(Unlink|Agent/${EXTEN})
exten => _X.,1,NoOp(AGENT: - Transfer - CAMPAIGN: ${CAMPAIGN} LEADID: ${LEADID}|Channel: ${CHANNEL})
exten => _X.,2,Set(ISTRANSFER=TRANSFER|TRANSFER_CONTEXT=agentdispo|AGENTCALLED=${EXTEN})
exten => _X.,3,UserEvent(AgentCalled|Agent/${EXTEN} ${CALLERIDNAME})
exten => _X.,4,Dial(PJSIP/${EXTEN},,t)
exten => _X.,5,UserEvent(Unlink|Agent/${EXTEN})
exten => t,1,Hangup

[agentdispo]
;exten => 12,1,Wait,1
exten => 12,1,UserEvent(Dispo|Body: Agent: ${AGENTCALLED}|Dispo: ${EXTEN}|Transfer: ${ISTRANSFER}|Campaign: ${CAMPAIGN}|Leadid: ${LEADID}|Channel: ${CHANNEL})
exten => 12,2,Wait,120
exten => _X,1,UserEvent(Dispo|Body: Agent: ${AGENTCALLED}|Dispo: ${EXTEN}|Transfer: ${ISTRANSFER}|Campaign: ${CAMPAIGN}|Leadid: ${LEADID}|Channel: ${CHANNEL})
exten => _X,2,Hangup
exten => _1X,1,UserEvent(Dispo|Body: Agent: ${AGENTCALLED}|Dispo: ${EXTEN}|Transfer: ${ISTRANSFER}|Campaign: ${CAMPAIGN}|Leadid: ${LEADID}|Channel: ${CHANNEL})
exten => _1X,2,Hangup

[closer]
exten => 699,1,NoOp(CLOSER: - Transfer - None Available - CAMPAIGN: ${CAMPAIGN} LEADID: ${LEADID}|Channel: ${CHANNEL})
exten => 699,2,Set(ISTRANSFER=TRANSFER|TRANSFER_CONTEXT=closerdispo|AGENTCALLED=${EXTEN})
exten => 699,3,Playback(allrepsbusy)
exten => 699,4,MusicOnHold(default)
exten => 699,5,Wait,20
exten => 699,6,UserEvent(Queue${ISTRANSFER}|CallerIDName: ${CALLERIDNAME})
;this wait must exist for it to NOT autofallthru and hangup
exten => 699,7,Wait,120
exten => _X,1,NoOp(CLOSER: - Transfer - CAMPAIGN: ${CAMPAIGN} LEADID: ${LEADID}|Channel: ${CHANNEL})
exten => _X,2,Set(ISTRANSFER=|TRANSFER_CONTEXT=closerdispo|AGENTCALLED=${EXTEN})
; this wait is to give the db time to update with agent entered info
exten => _X,3,Wait(2)
exten => _X,4,UserEvent(ClserCalled|Agent/${EXTEN} ${CALLERIDNAME})
exten => _X,5,Dial(Agent/${EXTEN}||t)
exten => _X,6,UserEvent(Unlink|Agent/${EXTEN})
exten => _X.,1,NoOp(CLOSER: - Transfer - CAMPAIGN: ${CAMPAIGN} LEADID: ${LEADID}|Channel: ${CHANNEL})
exten => _X.,2,Set(ISTRANSFER=|TRANSFER_CONTEXT=closerdispo|AGENTCALLED=${EXTEN})
; this wait is to give the db time to update with agent entered info
exten => _X.,3,Wait(3)
exten => _X.,4,UserEvent(ClserCalled|Agent/${EXTEN} ${CALLERIDNAME})
exten => _X.,5,Dial(Agent/${EXTEN}||t)
exten => _X.,6,UserEvent(Unlink|Agent/${EXTEN})
exten => t,1,Hangup 
exten => h,1,Hangup

[closerdispo]
exten => 12,1,UserEvent(Dispo|Body: Agent: ${AGENTCALLED}|Dispo: ${EXTEN}|Transfer: ${ISTRANSFER}|Campaign: ${CAMPAIGN}|Leadid: ${LEADID}|Channel: ${CHANNEL})
exten => 12,2,Hangup
exten => _X,1,UserEvent(Dispo|Body: Agent: ${AGENTCALLED}|Dispo: ${EXTEN}|Transfer: ${ISTRANSFER}|Campaign: ${CAMPAIGN}|Leadid: ${LEADID}|Channel: ${CHANNEL})
exten => _X,2,Hangup
exten => _1X,1,UserEvent(Dispo|Body: Agent: ${AGENTCALLED}|Dispo: ${EXTEN}|Transfer: ${ISTRANSFER}|Campaign: ${CAMPAIGN}|Leadid: ${LEADID}|Channel: ${CHANNEL})
exten => _1X,2,Hangup

[agent_conference]
exten => s,1,NoOp(Starting Conference Setup)
    same => 2,Set(agent=yes)
    same => n,Set(SERVER_ID=${GLOBAL(SERVER_ID)})
    ; Get the agent's PJSIP ID from the channel
    same => n,Set(AGENT_RAW=${CUT(CHANNEL,/,2)})
    same => n,Set(AGENT_ID=${CUT(AGENT_RAW,,1)})

    ; Check if a conference exists for this agent and server
    same => n,Set(CONFBRIDGE_ID=${ODBC_FETCH_BRIDGE(${AGENT_ID},${SERVER_ID})})

    ; If no conference found, create a new one
    same => n,GotoIf($[${ISNULL(${CONFBRIDGE_ID})}]?create_new_bridge)

    ; Update bridge status in db and go to bridge
    same => n(update_conf_status),NoOp(Updating conference status)
    same => n,Set(ODBC_UPDATE_CONF_STATUS(${CONFBRIDGE_ID})=)
    same => n,Goto(join_bridge)

    ; If no bridge exists, create a new entry in the database
    same => n(create_new_bridge),Set(ODBC_CREATE_BRIDGE(${AGENT_ID},${SERVER_ID})=) 
    same => n,Set(CONFBRIDGE_ID=${ODBC_FETCH_LAST_INSERT_ID()})  ; Fetch the newly created bridge ID
    same => n,GotoIf($[${ISNULL(${CONFBRIDGE_ID})}]?error)
    same => n,ConfBridge(${CONFBRIDGE_ID},default_bridge,default_user)

    ; Join the agent to the conference after status update
    same => n(join_bridge),ConfBridge(${CONFBRIDGE_ID},default_bridge,default_user)
    same => n,Hangup()

exten => h,1,NoOp(Agent has left the conference, updating database)
 same => n,Set(SERVER_ID=${GLOBAL(SERVER_ID)})
 same => n,Set(AGENT_RAW=${CUT(CHANNEL,/,2)})
 same => n,Set(AGENT_ID=${CUT(AGENT_RAW,,1)})
 same => n,ExecIf($["${agent}" = "yes"]?Set(ODBC_UPDATE_AGENT_STATUS(${AGENT_ID},${SERVER_ID})=)) 
 same => n,Hangup()

exten => error,1,NoOp(Bridge creation failed)
    same => n,Playback(error)
    same => n,Hangup()

